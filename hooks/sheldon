#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import argparse
import os
import textwrap

import check_xml
import codingstyle
import common
import cppcheck
import filesize
import forbidtoken

DEFAULT_HOOKS = 'crlf tab filesize oslm_log digraphs codingstyle doxygen copain check_xml'

parser = argparse.ArgumentParser(
    formatter_class=argparse.RawDescriptionHelpFormatter,
    description='Check and/or reformat code to comply to FW4SPL coding guidelines.',
    epilog=textwrap.dedent('The script works in three different ways depending on the number of paths:\n'
                           '    - If no path is specified, the current staged files are processed.\n'
                           '    - If 1 path is specified, the files modified in the specified path is processed.\n'
                           '    - If 2 paths are specified, the files modified between the two paths are processed.\n')
)

parser.add_argument('-f', '--format',
                    action="store_true",
                    help='Enable code reformatting.')

parser.add_argument('-v', '--verbose',
                    action="store_true",
                    help='Increase the verbosity level.')

parser.add_argument('--with-uncrustify',
                    action='store',
                    dest='uncrustify_path',
                    help='Use uncrustify from path.')

parser.add_argument('--with-cppcheck',
                    action='store',
                    dest='cppcheck_path',
                    help='Use cppcheck from path.')

parser.add_argument('-i', '--input',
                    action='store',
                    dest='input_path',
                    help='Check the specific file/directory, staged or not. Recursive when the argument is a directory')

parser.add_argument('path',
                    nargs='*',
                    help='Git path, can be a commit or two commits.')

args = parser.parse_args()

enableReformat = args.format

# Set global option from command line arguments
common.g_trace = args.verbose
common.g_cppcheck_path_arg = args.cppcheck_path
common.g_uncrustify_path_arg = args.uncrustify_path

if len(args.input_path) > 0:
    # Cleanup the path
    file_path = os.path.realpath(args.input_path)

    if os.path.isdir(file_path):
        # Change the current working dir so we can correctly detect a 'fw4spl' repository structure
        os.chdir(file_path)

        # Execute hooks on files
        files = [f for f in common.directory_on_disk(file_path)]
    elif os.path.isfile(file_path):
        # Change the current working dir so we can correctly detect a 'fw4spl' repository structure
        dir_path = os.path.dirname(file_path)
        os.chdir(dir_path)

        # Execute hooks on files
        files = [f for f in common.file_on_disk(file_path)]
    else:
        common.error('Cannot find the input file/directory, exiting...')
        exit(0)
else:
    if len(args.path) > 2:
        print("Invalid git path")
        exit(1)
    else:
        if len(args.path) > 1:
            files = [f for f in common.files_in_rev(args.path[0], args.path[1])]
        elif len(args.path) > 0:
            files = [f for f in common.files_in_rev(args.path[0])]
        else:
            # "Pre-commit" mode, get the list of staged files
            files = [f for f in common.files_staged_for_commit(common.current_commit())]

hooks = {}
hooks.update(forbidtoken.hooks)
hooks.update(filesize.hooks)
hooks.update(check_xml.hooks)
hooks.update(cppcheck.hooks)

print('\n' + '*' * 120)

if not files:
    common.note('No file(s) found, exiting...')
    exit(0)

common.note("Files to process :")
for f in files:
    common.note('- ' + f.path)
common.note('')

# By default, check that lgpl header is not present in source files of private repositories
checkLGPL = common.is_LGPL_repo()
if not checkLGPL:
    DEFAULT_HOOKS += ' lgpl'

active_hooks = common.get_option('fw4spl-hooks.hooks', default=DEFAULT_HOOKS).split()
common.note('Enabled hooks: ' + ', '.join(active_hooks))

print('\n' + '*' * 120)

if files:
    reformated = False
    if 'codingstyle' in active_hooks:
        common.note("Beautifier phase :")
        resultCodingstyle, reformatedList = codingstyle.codingstyle(files, enableReformat)
        print('\n' + '*' * 120)

    common.note("Check phase :")
    result = [f(files) for name, f in hooks.items() if name in active_hooks]
    result.append(resultCodingstyle)
    result = any(result)

    # Â User report
    print('\n' + '*' * 120)

    if (enableReformat):
        if result:
            common.error("Check failed !!! Check error messages above.")
            if reformatedList:
                print
                common.note("Meanwhile, some files have been reformatted :")
                for f in reformatedList:
                    common.note('- ' + f)
                common.note('Please review changes.')
            print
            common.error("Please fix the issues, stage modifications with 'git add' and run 'sheldon' again.")
        else:
            if reformatedList:
                common.note("Check succeeded, but some files have been reformatted :")
                for f in reformatedList:
                    common.note('- ' + f)
                common.note('Please review and commit changes.')
            else:
                common.note("Check succeeded ! \o/ ")
    else:
        if result or reformatedList:
            common.error("Check failed !!! ")
            if reformatedList:
                common.error('The following file(s) are not correctly formatted:')
                for f in reformatedList:
                    common.note('- ' + f)
            common.error("Please fix the issues, stage modifications with 'git add' and run 'sheldon' again.")

        else:
            common.note("Check succeeded ! \o/ ")

    print('*' * 120)

    exit(result)

exit(0)
